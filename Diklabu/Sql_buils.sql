/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * Author:  jtutt_000
 * Created: 15.10.2016
 */
CREATE DATABASE '/home/diklabu/temp/diklabu.fbd'
  USER 'SYSDBA'
  PASSWORD 'masterkey'
  PAGE_SIZE 4096;


/********************* ROLES **********************/

/*CREATE ROLE RDB$ADMIN;*/
/********************* UDFS ***********************/

/****************** GENERATORS ********************/

CREATE GENERATOR ANTWORTEN_ID_ANTWORT_GEN;
CREATE GENERATOR ANTWORTEN_ID_GEN;
CREATE GENERATOR ANTWORTSKALEN_ID_GEN;
CREATE GENERATOR FRAGEN_ID_FRAGE_GEN;
CREATE GENERATOR GEN_AUSBILDER;
CREATE GENERATOR GEN_BETRIEB;
CREATE GENERATOR GEN_KLASSE;
CREATE GENERATOR GEN_LEHRER;
CREATE GENERATOR GEN_SCHUELER;
CREATE GENERATOR GEN_TERMINE;
CREATE GENERATOR GEN_VERLAUF;
CREATE GENERATOR GEN__ID;
CREATE GENERATOR KLASSE_ALL_ID_GEN;
CREATE GENERATOR NOTEN_ALL_ID_GEN;
CREATE GENERATOR NOTEN_NEU_ID_GEN;
CREATE GENERATOR SCHULJAHR_ID_GEN;
CREATE GENERATOR SEQ_GEN_IDENTITY;
CREATE GENERATOR SEQ_GEN_SEQUENCE;
CREATE GENERATOR TEILNEHMER_ID_GEN;
CREATE GENERATOR UMFRAGE_ID_UMFRAGE_GEN;
CREATE GENERATOR VERTRETUNG_ID_GEN;
/******************** DOMAINS *********************/

CREATE DOMAIN D_ID
 AS Integer
 NOT NULL
;
CREATE DOMAIN D_IDN
 AS Integer
;
CREATE DOMAIN D_LF
 AS Char(5)
 NOT NULL
 COLLATE DE_DE;
CREATE DOMAIN D_LK
 AS Char(3)
 COLLATE DE_DE;
CREATE DOMAIN D_NAME
 AS Varchar(50)
 COLLATE DE_DE;
CREATE DOMAIN D_NAME_S
 AS Varchar(50) CHARACTER SET ISO8859_1
 COLLATE DE_DE;
CREATE DOMAIN D_TEXT
 AS Varchar(100)
 COLLATE DE_DE;
CREATE DOMAIN D_TEXT_S
 AS Varchar(100) CHARACTER SET ISO8859_1
 COLLATE DE_DE;
/******************* PROCEDURES ******************/

/******************** TABLES **********************/

CREATE TABLE ANTWORTEN
(
  ID Integer NOT NULL,
  ID_FRAGE Integer NOT NULL,
  ID_ANTWORTSKALA Integer NOT NULL,
  "KEY" Varchar(80) NOT NULL,
  PRIMARY KEY (ID)
);
CREATE TABLE ANTWORTSKALEN
(
  ID Integer NOT NULL,
  NAME Varchar(255),
  WERT Smallint,
  PRIMARY KEY (ID)
);
CREATE TABLE ANWESENHEIT
(
  ID_SCHUELER D_ID,
  DATUM Timestamp NOT NULL,
  ID_LEHRER D_LK COLLATE DE_DE,
  VERMERK Varchar(12),
  ID_KLASSE D_IDN,
  BEMERKUNG Char(1),
  KRANKMELDUNG Varchar(80)
);
CREATE TABLE AUSBILDER
(
  ID D_ID,
  ID_BETRIEB D_IDN,
  ANREDE D_NAME,
  NNAME D_NAME_S,
  EMAIL D_TEXT,
  TELEFON D_NAME,
  FAX D_NAME,
  PRIMARY KEY (ID)
);
CREATE TABLE AUSBILDER_BETRIEB
(
  AUSBILDER_ID Integer NOT NULL,
  BETRIEB_ID Integer NOT NULL,
  PRIMARY KEY (AUSBILDER_ID,BETRIEB_ID)
);
CREATE TABLE BEMERKUNG
(
  ID_SCHUELER Integer,
  DATUM Timestamp,
  ID_LEHRER D_LK COLLATE DE_DE,
  BEMERKUNG Varchar(255)
);
CREATE TABLE BETRIEB
(
  ID D_ID,
  NAME D_TEXT_S,
  PLZ D_NAME,
  ORT D_TEXT,
  STRASSE D_TEXT,
  NR Varchar(10),
  UMSCHULTRAEGER Char(1),
  PRIMARY KEY (ID)
);
CREATE TABLE BUCHUNGSFREIGABE
(
  ID_KURS D_ID
);
CREATE TABLE FOG_LF
(
  ID D_LF NOT NULL,
  BEZEICHNUNG D_NAME_S,
  SCHR Char(1),
  CONSTRAINT PK_FOG_LF PRIMARY KEY (ID)
);
CREATE TABLE FOG_SCHRNOTEN
(
  ID_S D_ID NOT NULL,
  ID_LF D_LF NOT NULL,
  ID_LK D_LK NOT NULL,
  NOTE Char(6),
  DATUM Timestamp,
  CONSTRAINT PK_FOG_SCHRNOTEN PRIMARY KEY (ID_S,ID_LF,ID_LK)
);
CREATE TABLE FOG_VORNOTEN
(
  ID_S D_ID NOT NULL,
  ID_LF D_LF NOT NULL,
  ID_LK D_LK NOT NULL,
  NOTE Char(6),
  DATUM Timestamp,
  CONSTRAINT PK_FOG_VORNOTEN PRIMARY KEY (ID_S,ID_LF,ID_LK)
);
CREATE TABLE FRAGEN
(
  ID_FRAGE Integer NOT NULL,
  TITEL Varchar(255),
  PRIMARY KEY (ID_FRAGE)
);
CREATE TABLE KATEGORIE
(
  ID D_ID,
  KATEGORIE D_NAME,
  PRIMARY KEY (ID)
);
CREATE TABLE KLASSE
(
  ID D_ID,
  KNAME D_NAME,
  ID_LEHRER D_LK COLLATE DE_DE,
  ID_KATEGORIE D_IDN,
  TERMINE D_NAME,
  TITEL D_TEXT,
  NOTIZ Varchar(255) CHARACTER SET ISO8859_1 COLLATE DE_DE,
  PRIMARY KEY (ID)
);
CREATE TABLE KLASSE_ALL
(
  ID Integer NOT NULL,
  KNAME Varchar(50),
  ID_LEHRER Char(3),
  ID_KATEGORIE Integer,
  TERMINE Varchar(50),
  TITEL Varchar(100),
  NOTIZ Varchar(256),
  ID_SCHULJAHR Integer,
  ID_KLASSE Integer,
  PRIMARY KEY (ID)
);
CREATE TABLE KONFIG
(
  TITEL D_NAME COLLATE DE_DE,
  STATUS Smallint
);
CREATE TABLE KURSWUNSCH
(
  ID_SCHUELER D_ID,
  ID_KURS D_ID,
  PRIORITAET Char(1),
  GEBUCHT Char(1)
);
CREATE TABLE LEHRER
(
  ID D_LK NOT NULL COLLATE DE_DE,
  NNAME D_NAME_S,
  VNAME D_NAME_S,
  TELEFON D_NAME,
  EMAIL D_TEXT,
  PASSWORT D_NAME,
  ACC_NAME D_NAME_S COLLATE DE_DE,
  CONSTRAINT PK_LEHRER PRIMARY KEY (ID)
);
CREATE TABLE LERNFELD
(
  ID Char(5) NOT NULL,
  BEZEICHNUNG D_TEXT_S,
  PRIMARY KEY (ID)
);
CREATE TABLE LOGINKLASSE
(
  ID_KLASSE Integer NOT NULL,
  LOGIN Varchar(100),
  STATUS Integer,
  CONSTRAINT PK_LOGINKLASSE PRIMARY KEY (ID_KLASSE)
);
CREATE TABLE LOGINLEHRER
(
  ID Char(3) NOT NULL,
  LOGINPLAZA Varchar(120),
  LOGINDOMAIN Varchar(120),
  STATUS Integer,
  CONSTRAINT PK_LOGINLEHRER PRIMARY KEY (ID),
  CONSTRAINT UNQ1_LOGINLEHRER UNIQUE (LOGINPLAZA),
  CONSTRAINT UNQ2_LOGINLEHRER UNIQUE (LOGINDOMAIN)
);
CREATE TABLE LOGINSCHUELER
(
  ID_SCHUELER Integer NOT NULL,
  LOGIN Varchar(100) NOT NULL,
  STATUS Integer DEFAULT 0,
  CONSTRAINT PK_LOGINSCHUELER PRIMARY KEY (ID_SCHUELER),
  CONSTRAINT UNQ1_LOGINSCHUELER UNIQUE (LOGIN)
);
CREATE TABLE NOTEN
(
  ID_SCHUELER D_ID,
  ID_LERNFELD Char(5) NOT NULL,
  ID_LK D_LK NOT NULL COLLATE DE_DE,
  WERT Char(6) CHARACTER SET ISO8859_1 COLLATE DE_DE,
  DATUM Timestamp,
  CONSTRAINT PK_NOTEN PRIMARY KEY (ID_SCHUELER,ID_LERNFELD)
);
CREATE TABLE NOTEN_ALL
(
  ID Integer NOT NULL,
  ID_SCHUELER Integer,
  ID_LERNFELD Char(5),
  ID_LK Char(3),
  WERT Char(6),
  DATUM Timestamp,
  ID_SCHUELER_ORG Integer,
  ID_SCHULJAHR Integer,
  ID_LERNFELD_ORG Char(5),
  ID_KLASSEN_ALL Integer,
  PRIMARY KEY (ID)
);
CREATE TABLE REL_FRAGE_ANTWORTEN
(
  ID_FRAGE Integer,
  ID_ANTWORT Integer
);
CREATE TABLE REL_UMFRAGE_FRAGE
(
  ID_UMFRAGE Integer,
  ID_FRAGE Integer
);
CREATE TABLE SCHUELER
(
  ID D_ID,
  ID_MMBBS D_IDN,
  ID_AUSBILDER D_IDN,
  NNAME D_NAME_S,
  VNAME D_NAME_S,
  GEBDAT Timestamp,
  EMAIL D_TEXT,
  PASS D_NAME,
  INFO D_TEXT,
  ACC Varchar(100),
  ID_UMSCHUL D_IDN,
  ABGANG Char(1),
  PRIMARY KEY (ID)
);
CREATE TABLE SCHUELERLOGIN
(
  ID_SCHUELER Integer NOT NULL,
  LOGIN Varchar(255),
  PRIMARY KEY (ID_SCHUELER)
);
CREATE TABLE SCHUELER_KLASSE
(
  ID_SCHUELER D_ID,
  ID_KLASSE D_ID
);
CREATE TABLE SCHULJAHR
(
  ID Integer NOT NULL,
  NAME Varchar(20),
  ZEUGNISDATUM Timestamp,
  PRIMARY KEY (ID)
);
CREATE TABLE TEILNEHMER
(
  "KEY" Varchar(80) NOT NULL,
  SCHUELERID Integer,
  BETRIEBID Integer,
  LEHRERID Varchar(3),
  INVITED Smallint,
  UMFRAGE Integer NOT NULL,
  PRIMARY KEY ("KEY")
);
CREATE TABLE TERMINDATEN
(
  ID_TERMIN D_ID,
  DATUM Timestamp NOT NULL
);
CREATE TABLE TERMINE
(
  ID D_ID,
  NAME D_NAME,
  PRIMARY KEY (ID)
);
CREATE TABLE UMFRAGE
(
  ID_UMFRAGE Integer NOT NULL,
  NAME Varchar(80),
  "ACTIVE" Integer,
  OWNER Varchar(3),
  PRIMARY KEY (ID_UMFRAGE)
);
CREATE TABLE VERLAUF
(
  ID D_ID,
  ID_KLASSE D_ID,
  DATUM Timestamp NOT NULL,
  STUNDE Varchar(5),
  ID_LEHRER D_LK COLLATE DE_DE,
  ID_LERNFELD Varchar(5),
  INHALT D_TEXT,
  BEMERKUNG D_TEXT,
  AUFGABE D_TEXT,
  PRIMARY KEY (ID)
);
CREATE TABLE VERTRETUNG
(
  ID Integer NOT NULL,
  EINGEREICHTVON Varchar(3) NOT NULL,
  EINGEREICHTAM Timestamp NOT NULL,
  ABSENZVON Varchar(3) NOT NULL,
  ABSENZAM Timestamp NOT NULL,
  JSONSTRING Varchar(2048) NOT NULL,
  KOMMENTAR Varchar(512),
  PRIMARY KEY (ID)
);
/********************* VIEWS **********************/

/******************* EXCEPTIONS *******************/

/******************** TRIGGERS ********************/

SET TERM ^ ;
CREATE TRIGGER BI_ANTWORTEN_ID FOR ANTWORTEN ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
      NEW.ID = GEN_ID(ANTWORTEN_ID_GEN, 1);
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER BI_ANTWORTSKALEN_ID FOR ANTWORTSKALEN ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
      NEW.ID = GEN_ID(ANTWORTSKALEN_ID_GEN, 1);
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER BI_FRAGEN_ID_FRAGE FOR FRAGEN ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_FRAGE IS NULL) THEN
      NEW.ID_FRAGE = GEN_ID(FRAGEN_ID_FRAGE_GEN, 1);
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER BI_KLASSE_ALL_ID FOR KLASSE_ALL ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
      NEW.ID = GEN_ID(KLASSE_ALL_ID_GEN, 1);
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER BI_NOTEN_ALL_ID FOR NOTEN_ALL ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
      NEW.ID = GEN_ID(NOTEN_ALL_ID_GEN, 1);
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER BI_SCHULJAHR_ID FOR SCHULJAHR ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
      NEW.ID = GEN_ID(SCHULJAHR_ID_GEN, 1);
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER BI_UMFRAGE_ID_UMFRAGE FOR UMFRAGE ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_UMFRAGE IS NULL) THEN
      NEW.ID_UMFRAGE = GEN_ID(UMFRAGE_ID_UMFRAGE_GEN, 1);
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER BI_VERTRETUNG_ID FOR VERTRETUNG ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
      NEW.ID = GEN_ID(VERTRETUNG_ID_GEN, 1);
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER KLASSE_BD FOR KLASSE ACTIVE
BEFORE DELETE POSITION 0
AS
BEGIN
  /* Trigger body */
    update KLASSE_ALL set KLASSE_ALL.ID_KLASSE=NULL where KLASSE_ALL.ID_KLASSE=OLD.ID;
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER KLASSE_BI FOR KLASSE ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  /* Trigger body */
  insert into Klasse_all (KNAME,ID_LEHRER,ID_KATEGORIE,TERMINE,TITEL,NOTIZ,ID_SCHULJAHR,ID_KLASSE) values (NEW.KNAME,NEW.ID_LEHRER,NEW.ID_KATEGORIE,NEW.TERMINE,NEW.TITEL,NEW.NOTIZ,(select first 1 ID from SCHULJAHR order by ID desc),NEW.ID);
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER KLASSE_BU FOR KLASSE ACTIVE
BEFORE UPDATE POSITION 0
AS
BEGIN
  /* Trigger body */
  update KLASSE_ALL set KLASSE_ALL.KNAME=NEW.KNAME,KLASSE_ALL.ID_LEHRER=NEW.ID_LEHRER,KLASSE_ALL.ID_KATEGORIE=NEW.ID_KATEGORIE,KLASSE_ALL.TERMINE=NEW.TERMINE,KLASSE_ALL.TITEL=NEW.TITEL,KLASSE_ALL.NOTIZ=NEW.NOTIZ where KLASSE_ALL.ID_KLASSE=NEW.ID and KLASSE_ALL.ID_SCHULJAHR=(select first 1 ID from SCHULJAHR order by ID desc);
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER NOTEN_BD FOR NOTEN ACTIVE
BEFORE DELETE POSITION 0
AS
BEGIN
  /* Trigger body */
  update NOTEN_ALL SET ID_SCHUELER_ORG=NULL,ID_LERNFELD_ORG=NULL WHERE
  NOTEN_ALL.ID_SCHUELER_ORG=OLD.ID_SCHUELER and 
  NOTEN_ALL.ID_LERNFELD_ORG=OLD.ID_LERNFELD;
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER NOTEN_BI FOR NOTEN ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  /* Trigger body */
  insert into NOTEN_ALL (ID_SCHUELER,ID_LERNFELD,ID_LK,WERT,DATUM,ID_SCHUELER_ORG,ID_LERNFELD_ORG,ID_SCHULJAHR) values
  (NEW.ID_SCHUELER,NEW.ID_LERNFELD,NEW.ID_LK,NEW.WERT,NEW.DATUM,NEW.ID_SCHUELER,NEW.ID_LERNFELD,(select first 1 ID from SCHULJAHR order by ID desc));  
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER NOTEN_BU FOR NOTEN ACTIVE
BEFORE UPDATE POSITION 0
AS
BEGIN
  /* Trigger body */
  update NOTEN_ALL SET ID_LK=NEW.ID_LK,WERT=NEW.WERT,DATUM=NEW.DATUM WHERE
  NOTEN_ALL.ID_SCHUELER_ORG=NEW.ID_SCHUELER and 
  NOTEN_ALL.ID_LERNFELD_ORG=NEW.ID_LERNFELD AND
  NOTEN_ALL.ID_SCHULJAHR = (select first 1 ID from SCHULJAHR order by ID desc);
END
^
SET TERM ; ^

ALTER TABLE ANTWORTEN ADD CONSTRAINT FK_ANTWORTEN1
  FOREIGN KEY (ID_FRAGE) REFERENCES FRAGEN (ID_FRAGE);
ALTER TABLE ANTWORTEN ADD CONSTRAINT FK_ANTWORTEN2
  FOREIGN KEY (ID_ANTWORTSKALA) REFERENCES ANTWORTSKALEN (ID);
ALTER TABLE ANTWORTEN ADD CONSTRAINT FK_ANTWORTEN3
  FOREIGN KEY ("KEY") REFERENCES TEILNEHMER ("KEY");
ALTER TABLE ANWESENHEIT ADD CONSTRAINT FK_ANWESENHEIT_1
  FOREIGN KEY (ID_LEHRER) REFERENCES LEHRER (ID) ON UPDATE CASCADE;
ALTER TABLE ANWESENHEIT ADD
  FOREIGN KEY (ID_SCHUELER) REFERENCES SCHUELER (ID);
ALTER TABLE AUSBILDER ADD
  FOREIGN KEY (ID_BETRIEB) REFERENCES BETRIEB (ID);
ALTER TABLE AUSBILDER_BETRIEB ADD CONSTRAINT SBILDERBETRIEBUSBILDERID
  FOREIGN KEY (AUSBILDER_ID) REFERENCES AUSBILDER (ID);
ALTER TABLE AUSBILDER_BETRIEB ADD CONSTRAINT USBILDERBETRIEBBETRIEBID
  FOREIGN KEY (BETRIEB_ID) REFERENCES BETRIEB (ID);
ALTER TABLE BEMERKUNG ADD CONSTRAINT FK_BEMERKUNG_1
  FOREIGN KEY (ID_LEHRER) REFERENCES LEHRER (ID) ON UPDATE CASCADE;
ALTER TABLE BEMERKUNG ADD
  FOREIGN KEY (ID_SCHUELER) REFERENCES SCHUELER (ID);
ALTER TABLE BUCHUNGSFREIGABE ADD
  FOREIGN KEY (ID_KURS) REFERENCES KLASSE (ID);
ALTER TABLE FOG_SCHRNOTEN ADD CONSTRAINT FK_FOG_SCHRNOTEN_1
  FOREIGN KEY (ID_S) REFERENCES SCHUELER (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE FOG_SCHRNOTEN ADD CONSTRAINT FK_FOG_SCHRNOTEN_2
  FOREIGN KEY (ID_LF) REFERENCES FOG_LF (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE FOG_SCHRNOTEN ADD CONSTRAINT FK_FOG_SCHRNOTEN_3
  FOREIGN KEY (ID_LK) REFERENCES LEHRER (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE FOG_VORNOTEN ADD CONSTRAINT FK_FOG_VORNOTEN_1
  FOREIGN KEY (ID_S) REFERENCES SCHUELER (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE FOG_VORNOTEN ADD CONSTRAINT FK_FOG_VORNOTEN_2
  FOREIGN KEY (ID_LF) REFERENCES FOG_LF (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE FOG_VORNOTEN ADD CONSTRAINT FK_FOG_VORNOTEN_3
  FOREIGN KEY (ID_LK) REFERENCES LEHRER (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE KLASSE ADD CONSTRAINT FK_KLASSE_1
  FOREIGN KEY (ID_LEHRER) REFERENCES LEHRER (ID) ON UPDATE CASCADE;
ALTER TABLE KLASSE ADD
  FOREIGN KEY (ID_KATEGORIE) REFERENCES KATEGORIE (ID);
ALTER TABLE KLASSE_ALL ADD CONSTRAINT FK_KLASSE_ALL
  FOREIGN KEY (ID_LEHRER) REFERENCES LEHRER (ID);
ALTER TABLE KLASSE_ALL ADD CONSTRAINT FK_KLASSE_ALL1
  FOREIGN KEY (ID_KATEGORIE) REFERENCES KATEGORIE (ID);
ALTER TABLE KLASSE_ALL ADD CONSTRAINT FK_KLASSE_ALL2
  FOREIGN KEY (ID_SCHULJAHR) REFERENCES SCHULJAHR (ID);
ALTER TABLE KURSWUNSCH ADD
  FOREIGN KEY (ID_SCHUELER) REFERENCES SCHUELER (ID);
ALTER TABLE KURSWUNSCH ADD
  FOREIGN KEY (ID_KURS) REFERENCES KLASSE (ID);
ALTER TABLE NOTEN ADD CONSTRAINT FK_NOTEN_1
  FOREIGN KEY (ID_SCHUELER) REFERENCES SCHUELER (ID);
ALTER TABLE NOTEN ADD CONSTRAINT FK_NOTEN_2
  FOREIGN KEY (ID_LERNFELD) REFERENCES LERNFELD (ID) ON UPDATE CASCADE;
ALTER TABLE NOTEN ADD CONSTRAINT FK_NOTEN_3
  FOREIGN KEY (ID_LK) REFERENCES LEHRER (ID) ON UPDATE CASCADE;
ALTER TABLE NOTEN_ALL ADD CONSTRAINT FK_NOTEN_ALL
  FOREIGN KEY (ID_SCHULJAHR) REFERENCES SCHULJAHR (ID);
ALTER TABLE NOTEN_ALL ADD CONSTRAINT FK_NOTEN_ALL1
  FOREIGN KEY (ID_KLASSEN_ALL) REFERENCES KLASSE_ALL (ID);
ALTER TABLE REL_FRAGE_ANTWORTEN ADD CONSTRAINT FK_REL_FRAGE_ANTWORTEN
  FOREIGN KEY (ID_FRAGE) REFERENCES FRAGEN (ID_FRAGE);
ALTER TABLE REL_FRAGE_ANTWORTEN ADD CONSTRAINT FK_REL_FRAGE_ANTWORTEN1
  FOREIGN KEY (ID_ANTWORT) REFERENCES ANTWORTSKALEN (ID);
ALTER TABLE REL_FRAGE_ANTWORTEN ADD CONSTRAINT RELFRAGEANTWORTENIDFRAGE
  FOREIGN KEY (ID_FRAGE) REFERENCES FRAGEN (ID_FRAGE);
ALTER TABLE REL_FRAGE_ANTWORTEN ADD CONSTRAINT RLFRAGEANTWORTENDANTWORT
  FOREIGN KEY (ID_ANTWORT) REFERENCES ANTWORTSKALEN (ID);
ALTER TABLE REL_UMFRAGE_FRAGE ADD CONSTRAINT FK_REL_UMFRAGE_FRAGE
  FOREIGN KEY (ID_UMFRAGE) REFERENCES UMFRAGE (ID_UMFRAGE);
ALTER TABLE REL_UMFRAGE_FRAGE ADD CONSTRAINT FK_REL_UMFRAGE_FRAGE1
  FOREIGN KEY (ID_FRAGE) REFERENCES FRAGEN (ID_FRAGE);
ALTER TABLE SCHUELER ADD CONSTRAINT FK_UMSCHUL
  FOREIGN KEY (ID_UMSCHUL) REFERENCES BETRIEB (ID);
ALTER TABLE SCHUELER ADD
  FOREIGN KEY (ID_AUSBILDER) REFERENCES AUSBILDER (ID);
ALTER TABLE SCHUELER_KLASSE ADD
  FOREIGN KEY (ID_SCHUELER) REFERENCES SCHUELER (ID);
ALTER TABLE SCHUELER_KLASSE ADD
  FOREIGN KEY (ID_KLASSE) REFERENCES KLASSE (ID);
ALTER TABLE TEILNEHMER ADD CONSTRAINT FK_TEILNEHMER
  FOREIGN KEY (UMFRAGE) REFERENCES UMFRAGE (ID_UMFRAGE);
ALTER TABLE TERMINDATEN ADD
  FOREIGN KEY (ID_TERMIN) REFERENCES TERMINE (ID);
ALTER TABLE UMFRAGE ADD CONSTRAINT FK_UMFRAGE
  FOREIGN KEY (OWNER) REFERENCES LEHRER (ID);
ALTER TABLE VERLAUF ADD CONSTRAINT FK_VERLAUF_1
  FOREIGN KEY (ID_LERNFELD) REFERENCES LERNFELD (ID) ON UPDATE CASCADE;
ALTER TABLE VERLAUF ADD CONSTRAINT FK_VERLAUF_2
  FOREIGN KEY (ID_LEHRER) REFERENCES LEHRER (ID) ON UPDATE CASCADE;
ALTER TABLE VERLAUF ADD
  FOREIGN KEY (ID_KLASSE) REFERENCES KLASSE (ID);
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ANTWORTEN TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ANTWORTSKALEN TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON ANWESENHEIT TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON ANWESENHEIT TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ANWESENHEIT TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON AUSBILDER TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON AUSBILDER TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON AUSBILDER TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON AUSBILDER_BETRIEB TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON BEMERKUNG TO  KLASSENBUCH WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON BEMERKUNG TO  SYSDBA;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON BETRIEB TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON BETRIEB TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON BETRIEB TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON BUCHUNGSFREIGABE TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON BUCHUNGSFREIGABE TO  KLASSENBUCH;

GRANT SELECT
 ON BUCHUNGSFREIGABE TO  KURSBUCHUNG;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON BUCHUNGSFREIGABE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FOG_LF TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FOG_LF TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON FOG_LF TO  VORJAHR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FOG_SCHRNOTEN TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FOG_SCHRNOTEN TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON FOG_SCHRNOTEN TO  VORJAHR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FOG_VORNOTEN TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FOG_VORNOTEN TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON FOG_VORNOTEN TO  VORJAHR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FRAGEN TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON KATEGORIE TO  INET;

GRANT SELECT
 ON KATEGORIE TO  INTRANET;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON KATEGORIE TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON KATEGORIE TO  KLASSENBUCH;

GRANT SELECT
 ON KATEGORIE TO  KURSBUCHUNG;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON KATEGORIE TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON KLASSE TO  BILDER;

GRANT SELECT
 ON KLASSE TO  INET;

GRANT SELECT
 ON KLASSE TO  INTRANET;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON KLASSE TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON KLASSE TO  KLASSENBUCH;

GRANT SELECT
 ON KLASSE TO  KURSBUCHUNG;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON KLASSE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON KLASSE_ALL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON KONFIG TO  KLASSENBUCH;

GRANT SELECT
 ON KONFIG TO  KURSBUCHUNG;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON KONFIG TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON KURSWUNSCH TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON KURSWUNSCH TO  KLASSENBUCH;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON KURSWUNSCH TO  KURSBUCHUNG;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON KURSWUNSCH TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON LEHRER TO  INET;

GRANT SELECT
 ON LEHRER TO  INTRANET;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON LEHRER TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON LEHRER TO  KLASSENBUCH;

GRANT SELECT
 ON LEHRER TO  KURSBUCHUNG;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LEHRER TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON LERNFELD TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON LERNFELD TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LERNFELD TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LOGINKLASSE TO  INET;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LOGINKLASSE TO  INTRANET;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LOGINKLASSE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LOGINLEHRER TO  INET;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LOGINLEHRER TO  INTRANET;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LOGINLEHRER TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LOGINSCHUELER TO  INET;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LOGINSCHUELER TO  INTRANET;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON LOGINSCHUELER TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON NOTEN TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON NOTEN TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON NOTEN_ALL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON REL_FRAGE_ANTWORTEN TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON REL_UMFRAGE_FRAGE TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON SCHUELER TO  BILDER;

GRANT SELECT
 ON SCHUELER TO  INET;

GRANT SELECT, UPDATE(ACC)
 ON SCHUELER TO  INTRANET;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON SCHUELER TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON SCHUELER TO  KLASSENBUCH;

GRANT SELECT, UPDATE
 ON SCHUELER TO  KURSBUCHUNG;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SCHUELER TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SCHUELERLOGIN TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON SCHUELER_KLASSE TO  BILDER;

GRANT SELECT
 ON SCHUELER_KLASSE TO  INET;

GRANT SELECT
 ON SCHUELER_KLASSE TO  INTRANET;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON SCHUELER_KLASSE TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON SCHUELER_KLASSE TO  KLASSENBUCH;

GRANT SELECT
 ON SCHUELER_KLASSE TO  KURSBUCHUNG;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SCHUELER_KLASSE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SCHULJAHR TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TEILNEHMER TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON TERMINDATEN TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON TERMINDATEN TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TERMINDATEN TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON TERMINE TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON TERMINE TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TERMINE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON UMFRAGE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON VERLAUF TO  KLASSENBUCH WITH GRANT OPTION;
GRANT REFERENCES
 ON VERLAUF TO  KLASSENBUCH;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON VERLAUF TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON VERTRETUNG TO  SYSDBA WITH GRANT OPTION;

